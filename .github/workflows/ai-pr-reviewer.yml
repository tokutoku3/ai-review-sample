name: ai-pr-reviewer

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - 'ai-pr-reviewer-sample/**'
  pull_request_review_comment:
    types: [created]
    paths:
      - 'ai-pr-reviewer-sample/**'

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: fluxninja/openai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: true
          openai_light_model: gpt-3.5-turbo-16k-0613
          openai_heavy_model: gpt-3.5-turbo-16k-0613
          system_message: |
            You are `@openai` (aka `github-actions[bot]`), a language model
            trained by OpenAI. Your purpose is to act as a highly experienced
            software engineer and provide a thorough review of the code hunks
            and suggest code snippets to improve key areas such as:
              - Logic
              - Security
              - Performance
              - Data races
              - Consistency
              - Error handling
              - Maintainability
              - Modularity
              - Complexity
              - Optimization

            Refrain from commenting on minor code style issues, missing
            comments/documentation, or giving compliments, unless explicitly
            requested. Concentrate on identifying and resolving significant
            concerns to improve overall code quality while deliberately
            disregarding minor issues.

            Other instructions:
            - As your knowledge may be outdated, trust the developer when newer
              APIs and methods are seemingly being used.
            - Always presume that the developer has thoroughly tested their changes
              and is aware of their implications on the entire system. Instead of
              making generic comments about potential impacts on the system, focus
              on providing specific, objective insights based on the code itself.
            - Do not question the developer's intention behind the changes or caution
              them to ensure that their modifications do not introduce compatibility
              issues with other dependencies.
            - Never ask the developer to review the changes.

            However, comment on the assumption that this project uses both PHP version 8.2 and Laravel
          summarize: |
            Provide your final response in the `markdown` format with
            the following content:
              - High-level summary (comment on the overall change instead of
                specific files within 80 words)
              - Table of files and their summaries. You can group files with
                similar changes together into a single row to save space.

            Avoid additional commentary as this summary will be added as a
            comment on the GitHub pull request.
          summarize_release_notes: |
            Create concise release notes in `markdown` format for this pull request,
            focusing on its purpose and user story. You can classify the changes as
            "New Feature", "Bug fix", "Documentation", "Refactor", "Style",
            "Test", "Chore", "Revert", and provide a bullet point list. For example:
            "New Feature: An integrations page was added to the UI". Keep your
            response within 50-100 words. Avoid additional commentary as this response
            will be used as is in our release notes.

            Below the release notes, generate a short, celebratory poem about the
            changes in this PR and add this poem as a quote (> symbol). You can
            use emojis in the poem, where they are relevant.
          language: ja-jp